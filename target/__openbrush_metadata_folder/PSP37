"#[doc =\n\" Contract module which provides a basic implementation of multiple token types.\"]\n#[doc =\n\" A single deployed contract may include any combination of fungible tokens,\"]\n#[doc =\n\" non-fungible tokens or other configurations (e.g. semi-fungible tokens).\"]\npub trait PSP37\n{\n    #[doc =\n    \" Returns the amount of tokens of token type `id` owned by `account`.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" If `id` is `None` returns the total number of `owner`\\'s tokens.\"]\n    #[ink(message)] #[ink(selector = 3291027938u32)] fn\n    balance_of(& self, owner : AccountId, id : Option < Id >) -> Balance ;\n    #[doc = \" Returns the total amount of token type `id` in the supply.\"]\n    #[doc = \"\"]\n    #[doc = \" If `id` is `None` returns the total number of tokens.\"]\n    #[ink(message)] #[ink(selector = 2588534874u32)] fn\n    total_supply(& self, id : Option < Id >) -> Balance ;\n    #[doc =\n    \" Returns amount of `id` token of `owner` that `operator` can withdraw\"]\n    #[doc =\n    \" If `id` is `None` returns allowance `Balance::MAX` of all tokens of `owner`\"]\n    #[ink(message)] #[ink(selector = 3413680229u32)] fn\n    allowance(& self, owner : AccountId, operator : AccountId, id : Option <\n    Id >) -> Balance ;\n    #[doc =\n    \" Allows `operator` to withdraw the `id` token from the caller\\'s account\"]\n    #[doc = \" multiple times, up to the `value` amount.\"]\n    #[doc =\n    \" If this function is called again it overwrites the current allowance with `value`\"]\n    #[doc =\n    \" If `id` is `None` approves or disapproves the operator for all tokens of the caller.\"]\n    #[doc = \"\"] #[doc = \" An `Approval` event is emitted.\"] #[ink(message)]\n    #[ink(selector = 832676947u32)] fn\n    approve(& mut self, operator : AccountId, id : Option < Id >, value :\n    Balance) -> Result < (), PSP37Error > ;\n    #[doc = \" Transfers `value` of `id` token from `caller` to `to`\"]\n    #[doc = \"\"] #[doc = \" On success a `TransferSingle` event is emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `TransferToZeroAddress` error if recipient is zero account.\"]\n    #[doc = \"\"]\n    #[doc = \" Returns `NotAllowed` error if transfer is not approved.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `InsufficientBalance` error if `caller` doesn\\'t contain enough balance.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `SafeTransferCheckFailed` error if `to` doesn\\'t accept transfer.\"]\n    #[ink(message)] #[ink(selector = 81828193u32)] fn\n    transfer(& mut self, to : AccountId, id : Id, value : Balance, data : Vec\n    < u8 >) -> Result < (), PSP37Error > ;\n    #[doc =\n    \" Transfers `amount` tokens of token type `id` from `from` to `to`. Also some `data` can be passed.\"]\n    #[doc = \"\"] #[doc = \" On success a `TransferSingle` event is emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `TransferToZeroAddress` error if recipient is zero account.\"]\n    #[doc = \"\"]\n    #[doc = \" Returns `NotAllowed` error if transfer is not approved.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `InsufficientBalance` error if `from` doesn\\'t contain enough balance.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `SafeTransferCheckFailed` error if `to` doesn\\'t accept transfer.\"]\n    #[ink(message)] #[ink(selector = 1559803860u32)] fn\n    transfer_from(& mut self, from : AccountId, to : AccountId, id : Id,\n    amount : Balance, data : Vec < u8 >,) -> Result < (), PSP37Error > ;\n}"