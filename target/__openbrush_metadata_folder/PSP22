"#[doc = \" Trait implemented by all PSP-22 respecting smart traits.\"] pub trait\nPSP22\n{\n    #[doc = \" Returns the total token supply.\"] #[ink(message)]\n    #[ink(selector = 372111554u32)] fn total_supply(& self) -> Balance ;\n    #[doc = \" Returns the account Balance for the specified `owner`.\"]\n    #[doc = \"\"] #[doc = \" Returns `0` if the account is non-existent.\"]\n    #[ink(message)] #[ink(selector = 1701328943u32)] fn\n    balance_of(& self, owner : AccountId) -> Balance ;\n    #[doc =\n    \" Returns the amount which `spender` is still allowed to withdraw from `owner`.\"]\n    #[doc = \"\"] #[doc = \" Returns `0` if no allowance has been set `0`.\"]\n    #[ink(message)] #[ink(selector = 1296554273u32)] fn\n    allowance(& self, owner : AccountId, spender : AccountId) -> Balance ;\n    #[doc =\n    \" Transfers `value` amount of tokens from the caller\\'s account to account `to`\"]\n    #[doc = \" with additional `data` in unspecified format.\"] #[doc = \"\"]\n    #[doc = \" On success a `Transfer` event is emitted.\"] #[doc = \"\"]\n    #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `InsufficientBalance` error if there are not enough tokens on\"]\n    #[doc = \" the caller\\'s account Balance.\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroSenderAddress` error if sender\\'s address is zero.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroRecipientAddress` error if recipient\\'s address is zero.\"]\n    #[ink(message)] #[ink(selector = 3676371445u32)] fn\n    transfer(& mut self, to : AccountId, value : Balance, data : Vec < u8 >)\n    -> Result < (), PSP22Error > ;\n    #[doc =\n    \" Transfers `value` tokens on the behalf of `from` to the account `to`\"]\n    #[doc = \" with additional `data` in unspecified format.\"] #[doc = \"\"]\n    #[doc =\n    \" This can be used to allow a contract to transfer tokens on ones behalf and/or\"]\n    #[doc = \" to charge fees in sub-currencies, for example.\"] #[doc = \"\"]\n    #[doc = \" On success a `Transfer` and `Approval` events are emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `InsufficientAllowance` error if there are not enough tokens allowed\"]\n    #[doc = \" for the caller to withdraw from `from`.\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `InsufficientBalance` error if there are not enough tokens on\"]\n    #[doc = \" the the account Balance of `from`.\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroSenderAddress` error if sender\\'s address is zero.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroRecipientAddress` error if recipient\\'s address is zero.\"]\n    #[ink(message)] #[ink(selector = 1421068142u32)] fn\n    transfer_from(& mut self, from : AccountId, to : AccountId, value :\n    Balance, data : Vec < u8 >,) -> Result < (), PSP22Error > ;\n    #[doc =\n    \" Allows `spender` to withdraw from the caller\\'s account multiple times, up to\"]\n    #[doc = \" the `value` amount.\"] #[doc = \"\"]\n    #[doc =\n    \" If this function is called again it overwrites the current allowance with `value`.\"]\n    #[doc = \"\"] #[doc = \" An `Approval` event is emitted.\"] #[doc = \"\"]\n    #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroSenderAddress` error if sender\\'s address is zero.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroRecipientAddress` error if recipient\\'s address is zero.\"]\n    #[ink(message)] #[ink(selector = 2987334589u32)] fn\n    approve(& mut self, spender : AccountId, value : Balance) -> Result < (),\n    PSP22Error > ;\n    #[doc =\n    \" Atomically increases the allowance granted to `spender` by the caller.\"]\n    #[doc = \"\"] #[doc = \" An `Approval` event is emitted.\"] #[doc = \"\"]\n    #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroSenderAddress` error if sender\\'s address is zero.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroRecipientAddress` error if recipient\\'s address is zero.\"]\n    #[ink(message)] #[ink(selector = 2530653562u32)] fn\n    increase_allowance(& mut self, spender : AccountId, delta_value : Balance)\n    -> Result < (), PSP22Error > ;\n    #[doc =\n    \" Atomically decreases the allowance granted to `spender` by the caller.\"]\n    #[doc = \"\"] #[doc = \" An `Approval` event is emitted.\"] #[doc = \"\"]\n    #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `InsufficientAllowance` error if there are not enough tokens allowed\"]\n    #[doc = \" by owner for `spender`.\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroSenderAddress` error if sender\\'s address is zero.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `ZeroRecipientAddress` error if recipient\\'s address is zero.\"]\n    #[ink(message)] #[ink(selector = 4274739157u32)] fn\n    decrease_allowance(& mut self, spender : AccountId, delta_value : Balance)\n    -> Result < (), PSP22Error > ;\n}"