"#[doc =\n\" Contract module which provides a basic access control mechanism, where\"]\n#[doc =\n\" there is an account (an owner) that can be granted exclusive access to\"]\n#[doc = \" specific functions.\"] pub trait Ownable\n{\n    #[doc = \" Returns the address of the current owner.\"] #[ink(message)]\n    #[ink(selector = 1336163468u32)] fn owner(& self) -> Option < AccountId >\n    ;\n    #[doc =\n    \" Leaves the contract without owner. It will not be possible to call\"]\n    #[doc =\n    \" owner\\'s functions anymore. Can only be called by the current owner.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" NOTE: Renouncing ownership will leave the contract without an owner,\"]\n    #[doc =\n    \" thereby removing any functionality that is only available to the owner.\"]\n    #[doc = \"\"]\n    #[doc = \" On success a `OwnershipTransferred` event is emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc = \" Panics with `CallerIsNotOwner` error if caller is not owner\"]\n    #[ink(message)] #[ink(selector = 1579321171u32)] fn\n    renounce_ownership(& mut self) -> Result < (), OwnableError > ;\n    #[doc = \" Transfers ownership of the contract to a `new_owner`.\"]\n    #[doc = \" Can only be called by the current owner.\"] #[doc = \"\"]\n    #[doc = \" On success a `OwnershipTransferred` event is emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc = \" Panics with `CallerIsNotOwner` error if caller is not owner.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Panics with `NewOwnerIsZero` error if new owner\\'s address is zero.\"]\n    #[ink(message)] #[ink(selector = 301219581u32)] fn\n    transfer_ownership(& mut self, new_owner : AccountId) -> Result < (),\n    OwnableError > ;\n}"