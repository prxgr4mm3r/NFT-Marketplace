"#[doc =\n\" Contract module that allows children to implement role-based access\"]\n#[doc =\n\" control mechanisms. This is a lightweight version that doesn\\'t allow enumerating role\"]\n#[doc =\n\" members except through off-chain means by accessing the contract event logs.\"]\n#[doc = \"\"]\n#[doc =\n\" Roles can be granted and revoked dynamically via the `grant_role` and\"]\n#[doc =\n\" `revoke_role`. functions. Each role has an associated admin role, and only\"]\n#[doc =\n\" accounts that have a role\\'s admin role can call `grant_role` and `revoke_role`.\"]\npub trait AccessControl\n{\n    #[doc = \" Returns `true` if `account` has been granted `role`.\"]\n    #[ink(message)] #[ink(selector = 3252268056u32)] fn\n    has_role(& self, role : RoleType, address : Option < AccountId >) -> bool\n    ;\n    #[doc =\n    \" Returns the admin role that controls `role`. See `grant_role` and `revoke_role`.\"]\n    #[ink(message)] #[ink(selector = 2212117426u32)] fn\n    get_role_admin(& self, role : RoleType) -> RoleType ;\n    #[doc = \" Grants `role` to `account`.\"] #[doc = \"\"]\n    #[doc = \" On success a `RoleGranted` event is emitted.\"] #[doc = \"\"]\n    #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns with `MissingRole` error if caller can\\'t grant the role.\"]\n    #[doc = \" Returns with `RoleRedundant` error `account` has `role`.\"]\n    #[ink(message)] #[ink(selector = 1254122237u32)] fn\n    grant_role(& mut self, role : RoleType, account : Option < AccountId >) ->\n    Result < (), AccessControlError > ;\n    #[doc = \" Revokes `role` from `account`.\"] #[doc = \"\"]\n    #[doc = \" On success a `RoleRevoked` event is emitted.\"] #[doc = \"\"]\n    #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc =\n    \" Returns with `MissingRole` error if caller can\\'t grant the `role` or if `account` doesn\\'t have `role`.\"]\n    #[ink(message)] #[ink(selector = 1850673553u32)] fn\n    revoke_role(& mut self, role : RoleType, account : Option < AccountId >)\n    -> Result < (), AccessControlError > ;\n    #[doc = \" Revokes `role` from the calling account.\"]\n    #[doc =\n    \" Roles are often managed via `grant_role` and `revoke_role`: this function\\'s\"]\n    #[doc =\n    \" purpose is to provide a mechanism for accounts to lose their privileges\"]\n    #[doc =\n    \" if they are compromised (such as when a trusted device is misplaced).\"]\n    #[doc = \"\"] #[doc = \" On success a `RoleRevoked` event is emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc = \" Returns with `InvalidCaller` error if caller is not `account`.\"]\n    #[doc =\n    \" Returns with `MissingRole` error if `account` doesn\\'t have `role`.\"]\n    #[ink(message)] #[ink(selector = 3941672074u32)] fn\n    renounce_role(& mut self, role : RoleType, account : Option < AccountId >)\n    -> Result < (), AccessControlError > ;\n}"