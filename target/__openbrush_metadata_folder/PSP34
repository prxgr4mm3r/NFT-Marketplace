"#[doc =\n\" Contract module which provides a basic implementation of non fungible token.\"]\npub trait PSP34\n{\n    #[doc = \" Returns the collection `Id` of the NFT token.\"] #[doc = \"\"]\n    #[doc =\n    \" This can represents the relationship between tokens/contracts/pallets.\"]\n    #[ink(message)] #[ink(selector = 4288838239u32)] fn collection_id(& self)\n    -> Id ; #[doc = \" Returns the balance of the owner.\"] #[doc = \"\"]\n    #[doc = \" This represents the amount of unique tokens the owner has.\"]\n    #[ink(message)] #[ink(selector = 3454526815u32)] fn\n    balance_of(& self, owner : AccountId) -> u32 ;\n    #[doc = \" Returns the owner of the token if any.\"] #[ink(message)]\n    #[ink(selector = 292053581u32)] fn owner_of(& self, id : Id) -> Option <\n    AccountId > ;\n    #[doc =\n    \" Returns `true` if the operator is approved by the owner to withdraw `id` token.\"]\n    #[doc =\n    \" If `id` is `None`, returns `true` if the operator is approved to withdraw all owner\\'s tokens.\"]\n    #[ink(message)] #[ink(selector = 1200682330u32)] fn\n    allowance(& self, owner : AccountId, operator : AccountId, id : Option <\n    Id >) -> bool ;\n    #[doc =\n    \" Approves `operator` to withdraw the `id` token from the caller\\'s account.\"]\n    #[doc =\n    \" If `id` is `None` approves or disapproves the operator for all tokens of the caller.\"]\n    #[doc = \"\"] #[doc = \" On success a `Approval` event is emitted.\"]\n    #[doc = \"\"] #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc = \" Returns `SelfApprove` error if it is self approve.\"] #[doc = \"\"]\n    #[doc = \" Returns `NotApproved` error if caller is not owner of `id`.\"]\n    #[ink(message)] #[ink(selector = 422750384u32)] fn\n    approve(& mut self, operator : AccountId, id : Option < Id >, approved :\n    bool) -> Result < (), PSP34Error > ;\n    #[doc = \" Transfer approved or owned token from caller.\"] #[doc = \"\"]\n    #[doc = \" On success a `Transfer` event is emitted.\"] #[doc = \"\"]\n    #[doc = \" # Errors\"] #[doc = \"\"]\n    #[doc = \" Returns `TokenNotExists` error if `id` does not exist.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `NotApproved` error if `from` doesn\\'t have allowance for transferring.\"]\n    #[doc = \"\"]\n    #[doc =\n    \" Returns `SafeTransferCheckFailed` error if `to` doesn\\'t accept transfer.\"]\n    #[ink(message)] #[ink(selector = 824759835u32)] fn\n    transfer(& mut self, to : AccountId, id : Id, data : Vec < u8 >) -> Result\n    < (), PSP34Error > ; #[doc = \" Returns current NFT total supply.\"]\n    #[ink(message)] #[ink(selector = 1652823038u32)] fn total_supply(& self)\n    -> Balance ;\n}"