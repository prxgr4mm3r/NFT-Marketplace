"#[doc =\n\" Flash Lender implementation as proposed in https://eips.ethereum.org/EIPS/eip-3156)\"]\npub trait FlashLender\n{\n    #[doc =\n    \" Call this function in `max_flashloan` function in `impl` block of FlashLender\"]\n    #[doc = \" Maximum amount of `token` available to mint\"]\n    #[doc = \" Bounded by the max value of Balance (u128)\"] #[ink(message)]\n    #[ink(selector = 2581442024u32)] fn\n    max_flashloan(& mut self, token : AccountId) -> Balance ;\n    #[doc =\n    \" Call this function in `flash_fee` function in `impl` block of FlashLender\"]\n    #[doc = \" Fee for borrowing `amount` of the `token`\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `WrongTokenAddress` error if the `token` account id is not this token\"]\n    #[ink(message)] #[ink(selector = 3499821135u32)] fn\n    flash_fee(& self, token : AccountId, amount : Balance) -> Result <\n    Balance, FlashLenderError > ;\n    #[doc =\n    \" Call this function in `flashloan` function in `impl` block of FlashLender\"]\n    #[doc =\n    \" Mints `amount` of `token` to `receiver_account` and performs the flashloan\"]\n    #[doc = \" `amount` is then burned along with the fee for the flashloan\"]\n    #[doc = \" `receiver_account` must implement `FlashBorrower`\"] #[doc = \"\"]\n    #[doc =\n    \" Returns `AllowanceDoesNotAllowRefund` error if the contract does not have\"]\n    #[doc =\n    \" enough allowance to transfer borrowed amount and fees from `receiver_account`\"]\n    #[ink(message)] #[ink(selector = 1733893728u32)] fn\n    flashloan(& mut self, receiver_account : AccountId, token : AccountId,\n    amount : Balance, data : Vec < u8 >,) -> Result < (), FlashLenderError > ;\n}"